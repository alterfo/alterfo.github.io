(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{378:function(v,_,a){"use strict";a.r(_);var t=a(4),i=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("Всё, что нужно знать об SDLC и Agile, это то, что это про деньги. Чем чаще релизы, тем чаще можно брать за это деньги.")]),v._v(" "),_("p",[v._v("Документация, ревизия кода, рефакторинг, работа с техдолгом, чеклисты, тесты, митинги, риск-менеджмент, бюрократия - это не то, за что заказчик платит с удовольствием.")]),v._v(" "),_("p",[v._v("Аналогия со строительством дома не подходит к разработке. Ближайшая метафора - конструкторское бюро или исследовательский центр.")]),v._v(" "),_("h2",{attrs:{id:"традиционные-подходы"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#традиционные-подходы"}},[v._v("#")]),v._v(" Традиционные подходы")]),v._v(" "),_("h3",{attrs:{id:"waterfall"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#waterfall"}},[v._v("#")]),v._v(" Waterfall")]),v._v(" "),_("p",[v._v("Без комментариев, все знают что такое waterfall и как долго заказчику приходится ждать первых результатов.")]),v._v(" "),_("h3",{attrs:{id:"rup"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rup"}},[v._v("#")]),v._v(" RUP")]),v._v(" "),_("p",[v._v("Компания Rational Software изобрела унифицированный язык описания объектно-ориентированной модели UML, и описала фазы разработки как:")]),v._v(" "),_("ul",[_("li",[v._v("Inception (discovery)")]),v._v(" "),_("li",[v._v("Elaboration (architecture)")]),v._v(" "),_("li",[v._v("Construction (MVP)")]),v._v(" "),_("li",[v._v("Transition (production)")])]),v._v(" "),_("p",[v._v("У каждой из фаз может быть несколько итераций, и у каждой из фаз есть свои вехи и дедлайны.")]),v._v(" "),_("p",[v._v("В разработке в той или иной степени (в зависимости от фазы) учавствуют следующие дисциплины:")]),v._v(" "),_("ul",[_("li",[v._v("Моделирование бизнеса")]),v._v(" "),_("li",[v._v("Требования")]),v._v(" "),_("li",[v._v("Анализ и дизайн")]),v._v(" "),_("li",[v._v("Разработка")]),v._v(" "),_("li",[v._v("Тестирование")]),v._v(" "),_("li",[v._v("Публикация (deployment)")]),v._v(" "),_("li",[v._v("Управление конфигурациями")]),v._v(" "),_("li",[v._v("Проектный менеджмент")]),v._v(" "),_("li",[v._v("Среда (environment)")])]),v._v(" "),_("p",[v._v("Одного взгляда на список достаточно чтобы понять что это дорого и трудно - управлять всем этим так, чтобы каждая дисциплина успевала вовремя и выдавала продукт в нужном качестве. Для этого нужна зрелость команды и процессов. Также нужен поток проектов чтобы у специалистов всегда была равномерная нагрузка.")]),v._v(" "),_("h2",{attrs:{id:"раннии-agile"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#раннии-agile"}},[v._v("#")]),v._v(" Ранний Agile")]),v._v(" "),_("h3",{attrs:{id:"dsdm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dsdm"}},[v._v("#")]),v._v(" DSDM")]),v._v(" "),_("p",[v._v("Чтобы делать продукты быстрее и дешевле, в 1994-м году энтузиасты создали DSDM (Dynamic System Development Method) консорциум, который в 2014-м году выпустил публичный handbook и переименовался в Agile Business Consorcium.")]),v._v(" "),_("p",[v._v("DSDM состоит всего из трех фаз:")]),v._v(" "),_("ul",[_("li",[v._v("Предпроектная подготовка - анализ, оценка реализуемости, бизнес-кейсы")]),v._v(" "),_("li",[v._v("Проектный жизненный цикл - итеративная разработка, определение максимального лимита времени, MoSCoW-приоретизация (Must, Should, Could, Won't)")]),v._v(" "),_("li",[v._v("Постпроектный этап - ретроспектива")])]),v._v(" "),_("h3",{attrs:{id:"fdd"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#fdd"}},[v._v("#")]),v._v(" FDD")]),v._v(" "),_("p",[v._v("Ещё один подход к разработке - очень легковесный и простой - FDD (Feature Driven Development). Фича - это работающая функция, которая приносит бизнес-ценность. Продукт - это просто набор готовых фич. В результате, поставляются только готовые фичи. Описание фичи содержит в себе действие, объект и результат.")]),v._v(" "),_("p",[v._v("Жизненный цикл FDD состоит из пяти этапов:")]),v._v(" "),_("ul",[_("li",[v._v("Разработка общей модели (доменная модель)")]),v._v(" "),_("li",[v._v("Написание списка фич")]),v._v(" "),_("li",[v._v("Планирование фич")]),v._v(" "),_("li",[v._v("Дизайн фич")]),v._v(" "),_("li",[v._v("Разработка фич (dev, test, deploy)")])]),v._v(" "),_("p",[v._v("В процессе реализации мониторится процент готовности фич. Фишка этого подхода - над продуктом может работать несколько команд одновременно. А команда - это состав, который необходим для реализации фичи целиком.")]),v._v(" "),_("h3",{attrs:{id:"crystal-methods"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#crystal-methods"}},[v._v("#")]),v._v(" Crystal Methods")]),v._v(" "),_("p",[v._v("Это семейство методологий, помеченных цветами. Выбор метода зависит от размера команды и критичности фейла продукта.\nКритичность оценивается возможными потерями и ранжируется по следующей шкале - комфорт, деньги, большие деньги, жизнь.\nРазмеры команд - 1-6, 7-20, 21-40, 41-80, 81-200.")]),v._v(" "),_("p",[v._v("Чем больше команда и чем выше риски, тем больше формализованных процессов добавляется к методу.")]),v._v(" "),_("p",[v._v("Основные ценности этого метода - люди, близкие и открытые коммуникации, легкий доступ к экспертам, персональная безопасность, частые поставки и ретроспективы, а также все современные техники, такие как автотесты и CI/CD")]),v._v(" "),_("h2",{attrs:{id:"современные-методы-разработки"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#современные-методы-разработки"}},[v._v("#")]),v._v(" Современные методы разработки")]),v._v(" "),_("h3",{attrs:{id:"scrum"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#scrum"}},[v._v("#")]),v._v(" Scrum")]),v._v(" "),_("p",[v._v("Как методология был описан ещё в 1995-м. В одном предложении это маленька кросс-функциональная команда, которая короткими итерациями работает над созданием работающего продукта. Итерации называются спринтами (от дня до 30 дней).")]),v._v(" "),_("p",[v._v("Процесс на самом деле прост, но чтобы выдавать предсказуемый результат нужны годы практики и я в своей 10-летней практике встречал только одного человека, которого могу назвать Scrum-мастером.")]),v._v(" "),_("p",[v._v("Основные артифакты:")]),v._v(" "),_("ul",[_("li",[v._v("Продуктовый бэклог - пополняемый набор задач")]),v._v(" "),_("li",[v._v("Бэклог спринта - задачи, готовые к работе")]),v._v(" "),_("li",[v._v("Ежедневные планёрки - что сделано, что будешь делать, есть ли проблемы\n"),_("ul",[_("li",[v._v("План действий")])])]),v._v(" "),_("li",[v._v("Продуктовый инкремент - релиз")])]),v._v(" "),_("p",[v._v("Роли: владелец продукта (PO), скрам-мастер (SM) и команда разработки (Team).")]),v._v(" "),_("p",[v._v("PO владеет продуктовым бэклогом - задачами, дефектами, пользовательскими историями, требованиями, улучшениями и тд. Он определяет что будет сделано и в каком порядке.")]),v._v(" "),_("p",[v._v("SM это Agile-коуч, это лидер и фанатик оптимизации, он не рулит, он толкает.")]),v._v(" "),_("p",[v._v("Team - самоорганизуемая группа специалистов, необходимых для выполнения задачи.")]),v._v(" "),_("p",[v._v("В начале спринта команда собирается на планнинг спринта и с помощью PO, при фасилитации SM, выбирает задачи на спринт. Каждый день спринта команда собирается на еженедельные планерки, где отчитывается о прогрессе. В конце спринта команда собирается на ревью того, что было сделано и подводит итоги. Опционально проводится ретроспектива, где команда делится соображениями по улучшению процесса. Результат ретроспективы - план действий с ответственными за их выполнение.")]),v._v(" "),_("h3",{attrs:{id:"lean-software-development"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#lean-software-development"}},[v._v("#")]),v._v(" Lean Software Development")]),v._v(" "),_("p",[v._v("Смоделирована по принципам производства Toyota. Фокусируется на минимизации затрат, визуализации продуктивности и находить узкие места.")]),v._v(" "),_("p",[v._v("Один из артифактов - Value Stream Map. Он должен содержать только важные шаги и никаких лишних телодвижений.")]),v._v(" "),_("p",[v._v("Основные принципы этого метода")]),v._v(" "),_("ul",[_("li",[v._v("уничтожение всего, что не приносит ценности")]),v._v(" "),_("li",[v._v("никаких золотых тарелок")]),v._v(" "),_("li",[v._v("избегание ненужных фич и смены контекстов")]),v._v(" "),_("li",[v._v("улучшение обучения")]),v._v(" "),_("li",[v._v("принятие решений в последний момент - никак не заранее, потому что всё меняется")]),v._v(" "),_("li",[v._v("поставки как можно скорее (fail fast)")]),v._v(" "),_("li",[v._v("поддержка команды, развитие креативности")]),v._v(" "),_("li",[v._v("концептуальная интегрированность команды - все немного знают чем занимаются другие")]),v._v(" "),_("li",[v._v("частые коммуникации с заказчиком")]),v._v(" "),_("li",[v._v("целостное видение")])]),v._v(" "),_("h3",{attrs:{id:"kanban"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kanban"}},[v._v("#")]),v._v(" Kanban")]),v._v(" "),_("p",[v._v("Это инструмент метода LSD для визуализации процесса работы. Выглядит просто - это вертикальные колонки на доске, отражающие этапы разработки, без лишних шагов, количество унифицированных задач на каждом этапе зависит от количества участникав и обязательно должно быть ограничено числом или сложностью.")]),v._v(" "),_("p",[v._v("Kanban позволяет получить усредненное значение времени, необходимого на работу над задачей путем простого разделения количества задач в колонке на время прихода этих задач.")]),v._v(" "),_("p",[v._v("Kanban позволяет визализировать узкие места и вовремя среагировать на них благодаря ограничению на количество задач. Каждая колонка может быть разделена ещё на две - в процессе и сделано.")]),v._v(" "),_("p",[v._v("Единственная церемония - ежедневные стендапы перед доской. Итерации отсутствуют, происходит непрерывная поставка по мере готовности.")]),v._v(" "),_("h3",{attrs:{id:"экстремальное-программирование-xp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#экстремальное-программирование-xp"}},[v._v("#")]),v._v(" Экстремальное программирование (XP)")]),v._v(" "),_("p",[v._v("Состоит из коротких недельных итераций, клиенто-ориентированной колаборации и ежеквартального макро-планирования.\nНа дизайн тратится не более 10 минут, также часто используется парное программирование и TDD.")]),v._v(" "),_("h3",{attrs:{id:"spotify-agile"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spotify-agile"}},[v._v("#")]),v._v(" Spotify Agile")]),v._v(" "),_("p",[v._v('Фишка в том, что Spotify отказался от использования любых методологий в пользу изучения реальных кейсов и создание культуры взамен какой-либо одной методологии ради гибкости. Подход к релизам у них следующий - небольшие группы людей работают над задачами в параллели и выпускают небольшие частые релизы. Релиз должен быть рутиной, а не драмой. Они также ввели понятия "поезда релизов" и фича-тогглинг (выключание фич по запросу и готовности сторонних систем)')]),v._v(" "),_("p",[v._v("Для постоянных улучшений используется Kata Board - описание проблемы, идеальное решение, реалистичный вариант и как выход - 3 топ действия которые приведут к улучшению.")]),v._v(" "),_("p",[v._v("Также Spotify широко используют понятие гильдий - людей с одинаковыми интересами, объединенные в комьюнити для обмена знаниями.")]),v._v(" "),_("h2",{attrs:{id:"ci-cd"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ci-cd"}},[v._v("#")]),v._v(" CI/CD")]),v._v(" "),_("p",[v._v("Все просто")]),v._v(" "),_("ul",[_("li",[v._v("CI требует от разработчиков стабильных инкрементов")]),v._v(" "),_("li",[v._v("CD требует от продакшн-сред стабильности и безболезненных релизов")])]),v._v(" "),_("p",[v._v("DevOps практики требуют тесной колаборации между разработчиками и тестировщиками и использования автоматизированных инструментов для обеспечения быстрых релизов.")]),v._v(" "),_("h2",{attrs:{id:"несколько-дополнительных-подходов"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#несколько-дополнительных-подходов"}},[v._v("#")]),v._v(" Несколько дополнительных подходов")]),v._v(" "),_("h3",{attrs:{id:"cmmi-capability-maturity-model-integration"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cmmi-capability-maturity-model-integration"}},[v._v("#")]),v._v(" CMMI - Capability Maturity Model Integration")]),v._v(" "),_("p",[v._v("Это модель и гайд для улучшения процессов организации, используется практически во всех сферах.")]),v._v(" "),_("p",[v._v("Модель содержит оценку зрелости от 1 до 5, где:")]),v._v(" "),_("ol",[_("li",[v._v("Непредсказуемость и реактивность - не укладываемся в сроки и бюджеты")]),v._v(" "),_("li",[v._v("Менеджмент на уровне проекта - присутствует планирование, оценки, контроль")]),v._v(" "),_("li",[v._v("Проактивность - менеджмент на уровне организации - стандартизация проектов, програм и портфолио")]),v._v(" "),_("li",[v._v("Количественный менеджмент и контроль - предсказуемые улучшения, основанные на фактах, полученных системами учета")]),v._v(" "),_("li",[v._v("Стабильность и гибкость - организация сфокусированна на постоянных улучшениях, а стабильный фундамент позволяет гибко встречать изменения и возможности")])]),v._v(" "),_("h3",{attrs:{id:"six-sigma"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#six-sigma"}},[v._v("#")]),v._v(" Six Sigma")]),v._v(" "),_("p",[v._v("Это техника для решения проблем из Моторолы. И тема для отдельного поста ввиду обширности тулсета, от PDCA до DMAIC.")]),v._v(" "),_("p",[v._v("Обзор методологий описаны по мотивам курса Software Development Life Cycle (SDLC) with Shashi Shekhar на LinkenIn Learning.")])])}),[],!1,null,null,null);_.default=i.exports}}]);